#!/usr/bin/env node

var chalk = require('chalk');
var log = require('single-line-log').stdout;
var middleware = require('ware')();
var opts = require('minimist')(process.argv.slice(2));
var xmlb = require('xmlbuilder');
var Browser = require('nodecast-js');
var Dlna = require('upnp-mediarenderer-client');

middleware.use(require('castnow/plugins/stdin'));
middleware.use(require('castnow/plugins/torrent'));
middleware.use(require('castnow/plugins/localfile'));
middleware.use(require('castnow/plugins/transcode'));

if (opts.help) {
  console.log([
    '',
    'Usage: dlnanow [<media>, <media>, ...] [OPTIONS]',
    '',
    'Option                  Meaning',
    '--tomp4                 Convert file to mp4 during playback',
    '--myip <ip>             Your local IP address',
    '--peerflix-* <value>    Pass options to peerflix',
    '--ffmpeg-* <value>      Pass options to ffmpeg',
    '--type <type>           Explicitly set the mime-type (e.g. "video/mp4")',
    '--help                  This help screen',
    ''
  ].join('\n'));

  process.exit(0);
}

if (opts._.length) {
  opts.playlist = opts._.map(function (item) {
    return {
      path: item
    };
  });
}

function info (msg, color) {
  log(chalk[color || 'yellow'](msg.join(' ') + '...'));
}

function abort (msg) {
  console.error(chalk.red(msg));
  process.exit(1);
}

function deviceLocated (device) {
  info(['Located', device.name], 'cyan');

  middleware.run({
    mode: 'launch',
    options: opts
  }, function (err, ctx) {
    if (err) abort(err.message);
    info(['Starting stream on', device.name], 'yellow');
    play(device, ctx.options.playlist[0]);
  });
}

function play (device, media) {
  var dlna = new Dlna(device.xml);
  var title = media.media.metadata.title;

  dlna.load(media.path, {
    autoplay: true,
    contentType: media.type,
    metadata: buildMetadata(media)
  }, function (err) {
    if (err) abort(err.message);
    info(['Playing', title, 'on', device.name], 'green');
  });
}

// The default metadata generated by upnp-mediarenderer-client
// causes an error to be thrown. This metadata has only been
// tested on an xbox one.
function buildMetadata (media) {
  var protocolInfo = 'http-get:*:' + media.type + ':*';

  return xmlb.create('DIDL-Lite', {headless: true}).att({
    'xmlns': 'urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/',
    'xmlns:dc': 'http://purl.org/dc/elements/1.1/',
    'xmlns:upnp': 'urn:schemas-upnp-org:metadata-1-0/upnp/',
    'xmlns:dlna': 'urn:schemas-dlna-org:metadata-1-0/',
    'xmlns:sec': 'http://www.sec.co.kr/',
    'xmlns:xbmc': 'urn:schemas-xbmc-org:metadata-1-0/'
  })
  .ele('item', {id: '0', parentID: '-1', restricted: '1' })
  .ele('dc:title', {}, media.media.metadata.title)
  .insertAfter('res', {protocolInfo: protocolInfo}, media.path)
  .insertAfter('upnp:class', {}, 'object.item.videoItem.movie')
  .end({ pretty: false });
}

var browser = new Browser();

// TODO: handle multiple detected devices
browser.onDevice(function (device) {
  browser.destroy();
  deviceLocated(device);
});

info(['Searching for devices']);
browser.start();
